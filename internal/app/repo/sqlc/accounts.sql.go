// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: accounts.sql

package repo

import (
	"context"

	"github.com/google/uuid"
)

const createAccount = `-- name: CreateAccount :one
insert into accounts (
    email
) values (
    $1
) returning id, email
`

func (q *Queries) CreateAccount(ctx context.Context, email string) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount, email)
	var i Account
	err := row.Scan(&i.ID, &i.Email)
	return i, err
}

const deleteAccountByID = `-- name: DeleteAccountByID :exec
delete from accounts
where id = $1
`

func (q *Queries) DeleteAccountByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAccountByID, id)
	return err
}

const getAccountByID = `-- name: GetAccountByID :one
select id, email from  accounts
where id = $1 limit 1
`

func (q *Queries) GetAccountByID(ctx context.Context, id uuid.UUID) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByID, id)
	var i Account
	err := row.Scan(&i.ID, &i.Email)
	return i, err
}

const updateAccountByID = `-- name: UpdateAccountByID :exec
update accounts set 
    email = $2
where id = $1
`

type UpdateAccountByIDParams struct {
	ID    uuid.UUID `json:"id"`
	Email string    `json:"email"`
}

func (q *Queries) UpdateAccountByID(ctx context.Context, arg UpdateAccountByIDParams) error {
	_, err := q.db.Exec(ctx, updateAccountByID, arg.ID, arg.Email)
	return err
}
