// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: users.sql

package repo

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
insert into users (
    name,
    email, 
    password, 
    role,
    password_changed_at, 
    created_at, 
    account_id
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) returning id, name, email, password, role, password_changed_at, created_at, account_id
`

type CreateUserParams struct {
	Name              string             `json:"name"`
	Email             string             `json:"email"`
	Password          string             `json:"password"`
	Role              Role               `json:"role"`
	PasswordChangedAt pgtype.Timestamptz `json:"password_changed_at"`
	CreatedAt         time.Time          `json:"created_at"`
	AccountID         uuid.UUID          `json:"account_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.Role,
		arg.PasswordChangedAt,
		arg.CreatedAt,
		arg.AccountID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.AccountID,
	)
	return i, err
}

const deleteUserByID = `-- name: DeleteUserByID :exec
delete from users where id = $1
`

func (q *Queries) DeleteUserByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserByID, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
select id, name, email, password, role, password_changed_at, created_at, account_id from users 
where email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.AccountID,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
select id, name, email, password, role, password_changed_at, created_at, account_id from users
where id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.AccountID,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
select id, name, email, password, role, password_changed_at, created_at, account_id from users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.Role,
			&i.PasswordChangedAt,
			&i.CreatedAt,
			&i.AccountID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setUserPassword = `-- name: SetUserPassword :exec
update users set
    password = $2,
    password_changed_at = now()
where id = $1
`

type SetUserPasswordParams struct {
	ID       uuid.UUID `json:"id"`
	Password string    `json:"password"`
}

func (q *Queries) SetUserPassword(ctx context.Context, arg SetUserPasswordParams) error {
	_, err := q.db.Exec(ctx, setUserPassword, arg.ID, arg.Password)
	return err
}

const setUserRole = `-- name: SetUserRole :exec
update users set
    role = $2
where id = $1
`

type SetUserRoleParams struct {
	ID   uuid.UUID `json:"id"`
	Role Role      `json:"role"`
}

func (q *Queries) SetUserRole(ctx context.Context, arg SetUserRoleParams) error {
	_, err := q.db.Exec(ctx, setUserRole, arg.ID, arg.Role)
	return err
}

const updateUserByID = `-- name: UpdateUserByID :exec
update users set 
    name = $2,
    email = $3,
    password = $4,
    role = $5,
    password_changed_at = $6,
    account_id = $7
where id = $1
`

type UpdateUserByIDParams struct {
	ID                uuid.UUID          `json:"id"`
	Name              string             `json:"name"`
	Email             string             `json:"email"`
	Password          string             `json:"password"`
	Role              Role               `json:"role"`
	PasswordChangedAt pgtype.Timestamptz `json:"password_changed_at"`
	AccountID         uuid.UUID          `json:"account_id"`
}

func (q *Queries) UpdateUserByID(ctx context.Context, arg UpdateUserByIDParams) error {
	_, err := q.db.Exec(ctx, updateUserByID,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.Role,
		arg.PasswordChangedAt,
		arg.AccountID,
	)
	return err
}
