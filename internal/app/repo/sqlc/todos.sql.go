// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: todos.sql

package repo

import (
	"context"

	"github.com/google/uuid"
)

const createTodo = `-- name: CreateTodo :one
insert into todos (
  user_id, task
) values (
  $1, $2
)
returning id, task, done, created_at, user_id
`

type CreateTodoParams struct {
	UserID uuid.UUID `json:"user_id"`
	Task   string    `json:"task"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.db.QueryRow(ctx, createTodo, arg.UserID, arg.Task)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Task,
		&i.Done,
		&i.CreatedAt,
		&i.UserID,
	)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :exec
delete from todos
where id = $1
`

func (q *Queries) DeleteTodo(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteTodo, id)
	return err
}

const getTodo = `-- name: GetTodo :one
select id, task, done, created_at, user_id from todos
where id = $1 limit 1
`

func (q *Queries) GetTodo(ctx context.Context, id uuid.UUID) (Todo, error) {
	row := q.db.QueryRow(ctx, getTodo, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Task,
		&i.Done,
		&i.CreatedAt,
		&i.UserID,
	)
	return i, err
}

const getTodos = `-- name: GetTodos :many
select id, task, done, created_at, user_id from todos
`

func (q *Queries) GetTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.Query(ctx, getTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Task,
			&i.Done,
			&i.CreatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodo = `-- name: UpdateTodo :exec
update todos
set task = $2,
    done  = $3
where id = $1
`

type UpdateTodoParams struct {
	ID   uuid.UUID `json:"id"`
	Task string    `json:"task"`
	Done bool      `json:"done"`
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) error {
	_, err := q.db.Exec(ctx, updateTodo, arg.ID, arg.Task, arg.Done)
	return err
}
