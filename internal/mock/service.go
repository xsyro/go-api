// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=../../mock/service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"
	time "time"

	requests "github.com/xsyro/goapi/internal/app/api/requests"
	repo "github.com/xsyro/goapi/internal/app/repo/sqlc"
	service "github.com/xsyro/goapi/internal/app/service"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockUserServices is a mock of UserServices interface.
type MockUserServices struct {
	ctrl     *gomock.Controller
	recorder *MockUserServicesMockRecorder
}

// MockUserServicesMockRecorder is the mock recorder for MockUserServices.
type MockUserServicesMockRecorder struct {
	mock *MockUserServices
}

// NewMockUserServices creates a new mock instance.
func NewMockUserServices(ctrl *gomock.Controller) *MockUserServices {
	mock := &MockUserServices{ctrl: ctrl}
	mock.recorder = &MockUserServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServices) EXPECT() *MockUserServicesMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockUserServices) Authenticate(ctx context.Context, lr requests.Login) (repo.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", ctx, lr)
	ret0, _ := ret[0].(repo.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockUserServicesMockRecorder) Authenticate(ctx, lr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockUserServices)(nil).Authenticate), ctx, lr)
}

// DeleteUser mocks base method.
func (m *MockUserServices) DeleteUser(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserServicesMockRecorder) DeleteUser(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserServices)(nil).DeleteUser), ctx, id)
}

// GetUser mocks base method.
func (m *MockUserServices) GetUser(ctx context.Context, id uuid.UUID) (repo.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, id)
	ret0, _ := ret[0].(repo.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserServicesMockRecorder) GetUser(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserServices)(nil).GetUser), ctx, id)
}

// GetUsers mocks base method.
func (m *MockUserServices) GetUsers(ctx context.Context) ([]repo.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx)
	ret0, _ := ret[0].([]repo.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockUserServicesMockRecorder) GetUsers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockUserServices)(nil).GetUsers), ctx)
}

// SignUp mocks base method.
func (m *MockUserServices) SignUp(ctx context.Context, sr requests.Signup) (repo.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", ctx, sr)
	ret0, _ := ret[0].(repo.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockUserServicesMockRecorder) SignUp(ctx, sr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockUserServices)(nil).SignUp), ctx, sr)
}

// MockTodoServices is a mock of TodoServices interface.
type MockTodoServices struct {
	ctrl     *gomock.Controller
	recorder *MockTodoServicesMockRecorder
}

// MockTodoServicesMockRecorder is the mock recorder for MockTodoServices.
type MockTodoServicesMockRecorder struct {
	mock *MockTodoServices
}

// NewMockTodoServices creates a new mock instance.
func NewMockTodoServices(ctrl *gomock.Controller) *MockTodoServices {
	mock := &MockTodoServices{ctrl: ctrl}
	mock.recorder = &MockTodoServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoServices) EXPECT() *MockTodoServicesMockRecorder {
	return m.recorder
}

// CreateTodo mocks base method.
func (m *MockTodoServices) CreateTodo(ctx context.Context, tr requests.PostTodo) (repo.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTodo", ctx, tr)
	ret0, _ := ret[0].(repo.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTodo indicates an expected call of CreateTodo.
func (mr *MockTodoServicesMockRecorder) CreateTodo(ctx, tr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTodo", reflect.TypeOf((*MockTodoServices)(nil).CreateTodo), ctx, tr)
}

// DeleteTodo mocks base method.
func (m *MockTodoServices) DeleteTodo(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTodo", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTodo indicates an expected call of DeleteTodo.
func (mr *MockTodoServicesMockRecorder) DeleteTodo(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodo", reflect.TypeOf((*MockTodoServices)(nil).DeleteTodo), ctx, id)
}

// GetTodo mocks base method.
func (m *MockTodoServices) GetTodo(ctx context.Context, id uuid.UUID) (repo.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodo", ctx, id)
	ret0, _ := ret[0].(repo.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodo indicates an expected call of GetTodo.
func (mr *MockTodoServicesMockRecorder) GetTodo(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodo", reflect.TypeOf((*MockTodoServices)(nil).GetTodo), ctx, id)
}

// GetTodos mocks base method.
func (m *MockTodoServices) GetTodos(ctx context.Context) ([]repo.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodos", ctx)
	ret0, _ := ret[0].([]repo.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodos indicates an expected call of GetTodos.
func (mr *MockTodoServicesMockRecorder) GetTodos(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodos", reflect.TypeOf((*MockTodoServices)(nil).GetTodos), ctx)
}

// UpdateTodo mocks base method.
func (m *MockTodoServices) UpdateTodo(ctx context.Context, tr requests.PatchTodo, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTodo", ctx, tr, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTodo indicates an expected call of UpdateTodo.
func (mr *MockTodoServicesMockRecorder) UpdateTodo(ctx, tr, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodo", reflect.TypeOf((*MockTodoServices)(nil).UpdateTodo), ctx, tr, id)
}

// MockTokenServices is a mock of TokenServices interface.
type MockTokenServices struct {
	ctrl     *gomock.Controller
	recorder *MockTokenServicesMockRecorder
}

// MockTokenServicesMockRecorder is the mock recorder for MockTokenServices.
type MockTokenServicesMockRecorder struct {
	mock *MockTokenServices
}

// NewMockTokenServices creates a new mock instance.
func NewMockTokenServices(ctrl *gomock.Controller) *MockTokenServices {
	mock := &MockTokenServices{ctrl: ctrl}
	mock.recorder = &MockTokenServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenServices) EXPECT() *MockTokenServicesMockRecorder {
	return m.recorder
}

// GenerateTokenPair mocks base method.
func (m *MockTokenServices) GenerateTokenPair(ctx context.Context, user *repo.User) (string, string, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTokenPair", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(time.Time)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GenerateTokenPair indicates an expected call of GenerateTokenPair.
func (mr *MockTokenServicesMockRecorder) GenerateTokenPair(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTokenPair", reflect.TypeOf((*MockTokenServices)(nil).GenerateTokenPair), ctx, user)
}

// ParseToken mocks base method.
func (m *MockTokenServices) ParseToken(ctx context.Context, tokenString string) (*service.JwtCustomClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", ctx, tokenString)
	ret0, _ := ret[0].(*service.JwtCustomClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockTokenServicesMockRecorder) ParseToken(ctx, tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockTokenServices)(nil).ParseToken), ctx, tokenString)
}

// ProlongToken mocks base method.
func (m *MockTokenServices) ProlongToken(ctx context.Context, userId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProlongToken", ctx, userId)
}

// ProlongToken indicates an expected call of ProlongToken.
func (mr *MockTokenServicesMockRecorder) ProlongToken(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProlongToken", reflect.TypeOf((*MockTokenServices)(nil).ProlongToken), ctx, userId)
}

// RemoveToken mocks base method.
func (m *MockTokenServices) RemoveToken(ctx context.Context, userId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveToken", ctx, userId)
}

// RemoveToken indicates an expected call of RemoveToken.
func (mr *MockTokenServicesMockRecorder) RemoveToken(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveToken", reflect.TypeOf((*MockTokenServices)(nil).RemoveToken), ctx, userId)
}

// ValidateToken mocks base method.
func (m *MockTokenServices) ValidateToken(ctx context.Context, claims map[string]any, isRefresh bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", ctx, claims, isRefresh)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockTokenServicesMockRecorder) ValidateToken(ctx, claims, isRefresh any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockTokenServices)(nil).ValidateToken), ctx, claims, isRefresh)
}

// Validator mocks base method.
func (m *MockTokenServices) Validator(next http.Handler) http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validator", next)
	ret0, _ := ret[0].(http.Handler)
	return ret0
}

// Validator indicates an expected call of Validator.
func (mr *MockTokenServicesMockRecorder) Validator(next any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validator", reflect.TypeOf((*MockTokenServices)(nil).Validator), next)
}

// Verifier mocks base method.
func (m *MockTokenServices) Verifier() func(http.Handler) http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verifier")
	ret0, _ := ret[0].(func(http.Handler) http.Handler)
	return ret0
}

// Verifier indicates an expected call of Verifier.
func (mr *MockTokenServicesMockRecorder) Verifier() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verifier", reflect.TypeOf((*MockTokenServices)(nil).Verifier))
}
