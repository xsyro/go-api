openapi: 3.1.0
info:
  title: GoAPI
  version: "1.0"
paths:
  /todos:
    get:
      summary: List all todos
      responses:
        '200':
          description: A list of todos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Todo'
    post:
      summary: Create a new todo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostTodo'
      responses:
        '200':
          description: Todo successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
  /todos/{id}:
    get:
      summary: Get a specific todo by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Specific todo details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
    patch:
      summary: Update a specific todo
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchTodo'
      responses:
        '200':
          description: Todo successfully updated
    delete:
      summary: Delete a specific todo
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Todo successfully deleted
  /users:
    get:
      summary: List all users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUser'
      responses:
        '200':
          description: User successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{id}:
    get:
      summary: Get a specific user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Specific user details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      summary: Delete a specific user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User successfully deleted
components:
  schemas:
    Todo:
      type: object
      properties:
        ID:
          type: string
          format: uuid
        Task:
          type: string
    PostTodo:
      type: object
      properties:
        UserID:
          type: string
          format: uuid
        Name:
          type: string
    PatchTodo:
      type: object
      properties:
        Name:
          type: string
        Done:
          type: boolean
    User:
      type: object
      properties:
        ID:
          type: string
          format: uuid
        Firstname:
          type: string
        Lastname:
          type: string
    PostUser:
      type: object
      properties:
        Firstname:
          type: string
        Lastname:
          type: string
